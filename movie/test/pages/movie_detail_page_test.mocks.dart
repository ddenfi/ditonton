// Mocks generated by Mockito 5.4.5 from annotations
// in movie/test/pages/movie_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:core/core.dart' as _i10;
import 'package:core/domain/entities/movie_detail.dart' as _i12;
import 'package:core/domain/usecases/get_movie_detail.dart' as _i2;
import 'package:core/domain/usecases/get_movie_recommendations.dart' as _i6;
import 'package:core/domain/usecases/get_watchlist_status.dart' as _i3;
import 'package:core/domain/usecases/remove_watchlist.dart' as _i5;
import 'package:core/domain/usecases/save_watchlist.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:movie/blocs/movie_detail/movie_detail_cubit.dart' as _i7;
import 'package:movie/blocs/movie_watchlist_status/movie_watchlist_status_cubit.dart'
    as _i11;
import 'package:movie/blocs/recommended_movies/recommended_movies_cubit.dart'
    as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetMovieDetail_0 extends _i1.SmartFake
    implements _i2.GetMovieDetail {
  _FakeGetMovieDetail_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetWatchListStatus_1 extends _i1.SmartFake
    implements _i3.GetWatchListStatus {
  _FakeGetWatchListStatus_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSaveWatchlist_2 extends _i1.SmartFake implements _i4.SaveWatchlist {
  _FakeSaveWatchlist_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRemoveWatchlist_3 extends _i1.SmartFake
    implements _i5.RemoveWatchlist {
  _FakeRemoveWatchlist_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetMovieRecommendations_4 extends _i1.SmartFake
    implements _i6.GetMovieRecommendations {
  _FakeGetMovieRecommendations_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [MovieDetailCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailCubit extends _i1.Mock implements _i7.MovieDetailCubit {
  MockMovieDetailCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetail get getMovieDetail => (super.noSuchMethod(
        Invocation.getter(#getMovieDetail),
        returnValue: _FakeGetMovieDetail_0(
          this,
          Invocation.getter(#getMovieDetail),
        ),
      ) as _i2.GetMovieDetail);

  @override
  _i7.MovieDetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i8.dummyValue<_i7.MovieDetailState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.MovieDetailState);

  @override
  _i9.Stream<_i7.MovieDetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i7.MovieDetailState>.empty(),
      ) as _i9.Stream<_i7.MovieDetailState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i9.Future<void> fetchMovieDetail(int? id) => (super.noSuchMethod(
        Invocation.method(#fetchMovieDetail, [id]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void emit(_i7.MovieDetailState? state) => super.noSuchMethod(
        Invocation.method(#emit, [state]),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i10.Change<_i7.MovieDetailState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
        Invocation.method(#addError, [error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
        Invocation.method(#onError, [error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(#close, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [MovieWatchlistStatusCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieWatchlistStatusCubit extends _i1.Mock
    implements _i11.MovieWatchlistStatusCubit {
  MockMovieWatchlistStatusCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GetWatchListStatus get getWatchListStatus => (super.noSuchMethod(
        Invocation.getter(#getWatchListStatus),
        returnValue: _FakeGetWatchListStatus_1(
          this,
          Invocation.getter(#getWatchListStatus),
        ),
      ) as _i3.GetWatchListStatus);

  @override
  _i4.SaveWatchlist get saveWatchlist => (super.noSuchMethod(
        Invocation.getter(#saveWatchlist),
        returnValue: _FakeSaveWatchlist_2(
          this,
          Invocation.getter(#saveWatchlist),
        ),
      ) as _i4.SaveWatchlist);

  @override
  _i5.RemoveWatchlist get removeWatchlist => (super.noSuchMethod(
        Invocation.getter(#removeWatchlist),
        returnValue: _FakeRemoveWatchlist_3(
          this,
          Invocation.getter(#removeWatchlist),
        ),
      ) as _i5.RemoveWatchlist);

  @override
  String get watchlistMessage => (super.noSuchMethod(
        Invocation.getter(#watchlistMessage),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#watchlistMessage),
        ),
      ) as String);

  @override
  set watchlistMessage(String? _watchlistMessage) => super.noSuchMethod(
        Invocation.setter(#watchlistMessage, _watchlistMessage),
        returnValueForMissingStub: null,
      );

  @override
  _i11.MovieWatchlistStatusState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i8.dummyValue<_i11.MovieWatchlistStatusState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.MovieWatchlistStatusState);

  @override
  _i9.Stream<_i11.MovieWatchlistStatusState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i11.MovieWatchlistStatusState>.empty(),
      ) as _i9.Stream<_i11.MovieWatchlistStatusState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i9.Future<void> loadWatchlistStatus(int? id) => (super.noSuchMethod(
        Invocation.method(#loadWatchlistStatus, [id]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> addWatchlist(_i12.MovieDetail? movie) => (super.noSuchMethod(
        Invocation.method(#addWatchlist, [movie]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeFromWatchlist(_i12.MovieDetail? movie) =>
      (super.noSuchMethod(
        Invocation.method(#removeFromWatchlist, [movie]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void emit(_i11.MovieWatchlistStatusState? state) => super.noSuchMethod(
        Invocation.method(#emit, [state]),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i10.Change<_i11.MovieWatchlistStatusState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
        Invocation.method(#addError, [error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
        Invocation.method(#onError, [error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(#close, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [RecommendedMoviesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecommendedMoviesCubit extends _i1.Mock
    implements _i13.RecommendedMoviesCubit {
  MockRecommendedMoviesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(
        Invocation.getter(#getMovieRecommendations),
        returnValue: _FakeGetMovieRecommendations_4(
          this,
          Invocation.getter(#getMovieRecommendations),
        ),
      ) as _i6.GetMovieRecommendations);

  @override
  _i13.RecommendedMoviesState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i8.dummyValue<_i13.RecommendedMoviesState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i13.RecommendedMoviesState);

  @override
  _i9.Stream<_i13.RecommendedMoviesState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i13.RecommendedMoviesState>.empty(),
      ) as _i9.Stream<_i13.RecommendedMoviesState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i9.Future<void> fetchMoviesRecommendation(int? id) => (super.noSuchMethod(
        Invocation.method(#fetchMoviesRecommendation, [id]),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void emit(_i13.RecommendedMoviesState? state) => super.noSuchMethod(
        Invocation.method(#emit, [state]),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i10.Change<_i13.RecommendedMoviesState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
        Invocation.method(#addError, [error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
        Invocation.method(#onError, [error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(#close, []),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}
